// Plik app.js
document.body.addEventListener("htmx:configRequest", (event) => {
  if (!event.detail || !event.detail.headers) return;
  const guestCartId = localStorage.getItem("guestCartId");
  if (guestCartId) event.detail.headers["X-Guest-Cart-Id"] = guestCartId;
  const jwtToken = localStorage.getItem("jwtToken");
  if (jwtToken) event.detail.headers["Authorization"] = "Bearer " + jwtToken;
});

document.body.addEventListener("updateCartCount", (htmxEvent) => {
  if (!htmxEvent.detail) return;
  document.body.dispatchEvent(
    new CustomEvent("js-update-cart", {
      detail: htmxEvent.detail,
      bubbles: true,
    }),
  );
  if (typeof htmxEvent.detail.newCartTotalPrice !== "undefined") {
    const el = document.getElementById("cart-subtotal-price");
    if (el)
      el.innerHTML =
        (parseInt(htmxEvent.detail.newCartTotalPrice) / 100)
          .toFixed(2)
          .replace(".", ",") + " zÅ‚";
  }
});

document.body.addEventListener("htmx:afterSwap", function (event) {
  if (
    event.detail.target.id === "content" ||
    event.detail.target.closest("#content")
  ) {
    if (
      !window.location.pathname.endsWith("/logowanie") &&
      !window.location.pathname.endsWith("/rejestracja")
    ) {
      const loginMessages = document.getElementById("login-messages");
      if (loginMessages) loginMessages.innerHTML = "";
      const registrationMessages = document.getElementById(
        "registration-messages",
      );
      if (registrationMessages) registrationMessages.innerHTML = "";
    }
    window.scrollTo({ top: 0, behavior: "smooth" });
  }
});

// --- Centralny listener authChangedClient ---
// Teraz gÅ‚Ã³wnie odpowiedzialny za peÅ‚ne przeÅ‚adowanie strony na "/"
document.addEventListener("authChangedClient", function (event) {
  console.log(
    "app.js: authChangedClient RECEIVED. isAuthenticated:",
    event.detail.isAuthenticated,
    "Source:",
    event.detail.source,
  );

  const isAuthenticated = event.detail.isAuthenticated;
  const source = event.detail.source;

  // Sprawdzamy, czy URL to juÅ¼ "/" aby uniknÄ…Ä‡ niepotrzebnego przeÅ‚adowania,
  // chyba Å¼e jest to wymuszone (np. po jawnym logowaniu/wylogowaniu).
  const isAlreadyHome = window.location.pathname === "/";

  if (source === "login" && isAuthenticated) {
    // Komunikat o sukcesie logowania powinien byÄ‡ juÅ¼ wyÅ›wietlony przez HX-Trigger z serwera
    // lub przez listener 'loginSuccessDetails'.
    console.log(
      "app.js: authChangedClient - User logged in. Reloading to homepage.",
    );
    // UÅ¼yj replace, aby uÅ¼ytkownik nie mÃ³gÅ‚ wrÃ³ciÄ‡ przyciskiem "wstecz" do strony logowania/konta
    if (!isAlreadyHome || event.detail.forceReload) window.location.href("/");
  } else if ((source === "logout" || source === "401") && !isAuthenticated) {
    // Komunikat o wylogowaniu lub wygaÅ›niÄ™ciu sesji jest emitowany przez inne listenery.
    // Tutaj dodajemy opÃ³Åºnienie, aby uÅ¼ytkownik zdÄ…Å¼yÅ‚ zobaczyÄ‡ komunikat przed przeÅ‚adowaniem.
    console.log(
      "app.js: authChangedClient - User logged out or session expired. Reloading to homepage after delay.",
    );
    setTimeout(
      () => {
        if (!isAlreadyHome || event.detail.forceReload)
          window.location.href("/");
      },
      source === "401" ? 1 : 1,
    ); // DÅ‚uÅ¼sze opÃ³Åºnienie dla komunikatu o bÅ‚Ä™dzie 401
  }
  // Inne przypadki 'authChangedClient' (jeÅ›li takie sÄ… i nie majÄ… 'source') nie spowodujÄ… przeÅ‚adowania.
});

document.body.addEventListener("authChangedFromBackend", function (evt) {
  if (evt.detail && typeof evt.detail.isAuthenticated !== "undefined") {
    if (evt.detail.token) {
      localStorage.setItem("jwtToken", evt.detail.token);
    } else if (!evt.detail.isAuthenticated) {
      localStorage.removeItem("jwtToken");
    }
    // Przekazujemy informacjÄ™ o przekierowaniu do centralnego listenera
    window.dispatchEvent(
      new CustomEvent("authChangedClient", {
        detail: {
          isAuthenticated: evt.detail.isAuthenticated,
          redirectUrl: evt.detail.redirectUrl, // PrzekaÅ¼ redirectUrl
          pushUrl: evt.detail.pushUrl, // PrzekaÅ¼ pushUrl
        },
      }),
    );
  }
});

// --- Listener dla "loginSuccessDetails" (z HX-Trigger od serwera) ---
document.body.addEventListener("loginSuccessDetails", function (evt) {
  console.log("loginSuccessDetails: Detail:", evt.detail);
  if (evt.detail && evt.detail.token) {
    localStorage.setItem("jwtToken", evt.detail.token);
    // Komunikat o sukcesie logowania jest juÅ¼ wysyÅ‚any przez serwer (HX-Trigger showMessage)
    // i powinien zostaÄ‡ wyÅ›wietlony przez komponent Toast w Alpine.js.
    // Czekamy chwilÄ™, aby uÅ¼ytkownik mÃ³gÅ‚ zobaczyÄ‡ komunikat, a nastÄ™pnie przeÅ‚adowujemy.
    console.log("Login successful. Reloading to homepage...");
    setTimeout(() => {
      window.location.replace("/"); // PeÅ‚ne przeÅ‚adowanie na stronÄ™ gÅ‚Ã³wnÄ…
    }, 700); // KrÃ³tkie opÃ³Åºnienie na wyÅ›wietlenie komunikatu sukcesu
  } else {
    console.error(
      "[App.js] loginSuccessDetails event, but NO TOKEN:",
      evt.detail,
    );
    // WyÅ›wietl bÅ‚Ä…d, jeÅ›li token nie dotarÅ‚
    window.dispatchEvent(
      new CustomEvent("showMessage", {
        detail: {
          message: "Blad logowania: brak tokenu (klient).",
          type: "error",
        },
      }),
    );
  }
});

document.body.addEventListener("registrationComplete", function (evt) {
  console.log(
    '<<<<< [App.js] "registrationComplete" EVENT RECEIVED >>>>>. Detail:',
    JSON.stringify(evt.detail),
  );
  const form = document.getElementById("registration-form");
  if (form && form.reset) {
    form.reset();
  }
  setTimeout(() => {
    if (window.htmx) {
      htmx.ajax("GET", "/htmx/logowanie", {
        // Przekierowanie na logowanie po rejestracji
        target: "#content",
        swap: "innerHTML",
        pushUrl: "/logowanie",
      });
    }
  }, 1);
});

document.body.addEventListener("htmx:afterOnLoad", function (evt) {
  const response = evt.detail.xhr.responseText;
  try {
    const json = JSON.parse(response);
    if (json.showMessage) {
      window.dispatchEvent(
        new CustomEvent("showMessage", {
          detail: {
            message: json.showMessage.message,
            type: json.showMessage.type || "info",
          },
        }),
      );
    }
  } catch (_) {
    // Niepoprawny JSON â€“ ignorujemy
  }
});

// Listener htmx:responseError
document.body.addEventListener("htmx:responseError", function (evt) {
  const xhr = evt.detail.xhr;
  if (xhr.status === 401) {
    console.warn(
      "ğŸ”¥ Otrzymano 401 Unauthorized â€“ sesja mogÅ‚a wygasnÄ…Ä‡. Usuwam token.",
    );
    localStorage.removeItem("jwtToken");
    console.log("Token JWT usuniÄ™ty z localStorage.");

    // Poinformuj Alpine.js o zmianie stanu (aby np. zaktualizowaÅ‚ tekst linku)
    // To zdarzenie nie bÄ™dzie juÅ¼ inicjowaÄ‡ nawigacji HTMX, jeÅ›li Alpine je tylko konsumuje do zmiany stanu.
    window.dispatchEvent(
      new CustomEvent("authChangedClient", {
        detail: {
          isAuthenticated: false,
          // Nie potrzebujemy juÅ¼ redirectUrl/pushUrl/source tutaj, jeÅ›li zawsze jest peÅ‚ny reload
        },
      }),
    );

    // WyÅ›wietl komunikat dla uÅ¼ytkownika.
    window.dispatchEvent(
      new CustomEvent("showMessage", {
        detail: {
          message:
            "Twoja sesja wygasÅ‚a lub nie masz uprawnieÅ„. Zaloguj siÄ™ ponownie.",
          type: "warning",
        },
      }),
    );

    // PrzeÅ‚aduj stronÄ™ na stronÄ™ gÅ‚Ã³wnÄ… po chwili, aby uÅ¼ytkownik zobaczyÅ‚ komunikat.
    console.log("Session expired (401). Reloading to homepage after delay...");
    setTimeout(() => {
      window.location.replace("/"); // PeÅ‚ne przeÅ‚adowanie na stronÄ™ gÅ‚Ã³wnÄ…
    }, 1); // OpÃ³Åºnienie na wyÅ›wietlenie komunikatu
  }
});
